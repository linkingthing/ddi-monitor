// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: ddi.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StartDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartDNSRequest) Reset() {
	*x = StartDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDNSRequest) ProtoMessage() {}

func (x *StartDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDNSRequest.ProtoReflect.Descriptor instead.
func (*StartDNSRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{0}
}

type StartDHCPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartDHCPRequest) Reset() {
	*x = StartDHCPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDHCPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDHCPRequest) ProtoMessage() {}

func (x *StartDHCPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDHCPRequest.ProtoReflect.Descriptor instead.
func (*StartDHCPRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{1}
}

type StopDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopDNSRequest) Reset() {
	*x = StopDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDNSRequest) ProtoMessage() {}

func (x *StopDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDNSRequest.ProtoReflect.Descriptor instead.
func (*StopDNSRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{2}
}

type StopDHCPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopDHCPRequest) Reset() {
	*x = StopDHCPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDHCPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDHCPRequest) ProtoMessage() {}

func (x *StopDHCPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDHCPRequest.ProtoReflect.Descriptor instead.
func (*StopDHCPRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{3}
}

type DDIMonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
}

func (x *DDIMonitorResponse) Reset() {
	*x = DDIMonitorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDIMonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDIMonitorResponse) ProtoMessage() {}

func (x *DDIMonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDIMonitorResponse.ProtoReflect.Descriptor instead.
func (*DDIMonitorResponse) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{4}
}

func (x *DDIMonitorResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

type GetDNSStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDNSStateRequest) Reset() {
	*x = GetDNSStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDNSStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDNSStateRequest) ProtoMessage() {}

func (x *GetDNSStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDNSStateRequest.ProtoReflect.Descriptor instead.
func (*GetDNSStateRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{5}
}

type GetDHCPStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDHCPStateRequest) Reset() {
	*x = GetDHCPStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPStateRequest) ProtoMessage() {}

func (x *GetDHCPStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPStateRequest.ProtoReflect.Descriptor instead.
func (*GetDHCPStateRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{6}
}

type DDIStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRunning bool `protobuf:"varint,1,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
}

func (x *DDIStateResponse) Reset() {
	*x = DDIStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DDIStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDIStateResponse) ProtoMessage() {}

func (x *DDIStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDIStateResponse.ProtoReflect.Descriptor instead.
func (*DDIStateResponse) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{7}
}

func (x *DDIStateResponse) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

type GetInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInterfacesRequest) Reset() {
	*x = GetInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfacesRequest) ProtoMessage() {}

func (x *GetInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfacesRequest.ProtoReflect.Descriptor instead.
func (*GetInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{8}
}

type GetInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces4 []string `protobuf:"bytes,1,rep,name=interfaces4,proto3" json:"interfaces4,omitempty"`
	Interfaces6 []string `protobuf:"bytes,2,rep,name=interfaces6,proto3" json:"interfaces6,omitempty"`
}

func (x *GetInterfacesResponse) Reset() {
	*x = GetInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfacesResponse) ProtoMessage() {}

func (x *GetInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfacesResponse.ProtoReflect.Descriptor instead.
func (*GetInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{9}
}

func (x *GetInterfacesResponse) GetInterfaces4() []string {
	if x != nil {
		return x.Interfaces4
	}
	return nil
}

func (x *GetInterfacesResponse) GetInterfaces6() []string {
	if x != nil {
		return x.Interfaces6
	}
	return nil
}

type ReconfigDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReconfigDNSRequest) Reset() {
	*x = ReconfigDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconfigDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconfigDNSRequest) ProtoMessage() {}

func (x *ReconfigDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconfigDNSRequest.ProtoReflect.Descriptor instead.
func (*ReconfigDNSRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{10}
}

type ReloadDNSConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadDNSConfigRequest) Reset() {
	*x = ReloadDNSConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadDNSConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadDNSConfigRequest) ProtoMessage() {}

func (x *ReloadDNSConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadDNSConfigRequest.ProtoReflect.Descriptor instead.
func (*ReloadDNSConfigRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{11}
}

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneName    string `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ViewName    string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	ZoneFile    string `protobuf:"bytes,3,opt,name=zone_file,json=zoneFile,proto3" json:"zone_file,omitempty"`
	ZoneRole    string `protobuf:"bytes,4,opt,name=zone_role,json=zoneRole,proto3" json:"zone_role,omitempty"`
	ZoneMasters string `protobuf:"bytes,5,opt,name=zone_masters,json=zoneMasters,proto3" json:"zone_masters,omitempty"`
	ZoneSlaves  string `protobuf:"bytes,6,opt,name=zone_slaves,json=zoneSlaves,proto3" json:"zone_slaves,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{12}
}

func (x *Zone) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *Zone) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *Zone) GetZoneFile() string {
	if x != nil {
		return x.ZoneFile
	}
	return ""
}

func (x *Zone) GetZoneRole() string {
	if x != nil {
		return x.ZoneRole
	}
	return ""
}

func (x *Zone) GetZoneMasters() string {
	if x != nil {
		return x.ZoneMasters
	}
	return ""
}

func (x *Zone) GetZoneSlaves() string {
	if x != nil {
		return x.ZoneSlaves
	}
	return ""
}

type AddDNSZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone *Zone `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *AddDNSZoneRequest) Reset() {
	*x = AddDNSZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDNSZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDNSZoneRequest) ProtoMessage() {}

func (x *AddDNSZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDNSZoneRequest.ProtoReflect.Descriptor instead.
func (*AddDNSZoneRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{13}
}

func (x *AddDNSZoneRequest) GetZone() *Zone {
	if x != nil {
		return x.Zone
	}
	return nil
}

type UpdateDNSZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone *Zone `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *UpdateDNSZoneRequest) Reset() {
	*x = UpdateDNSZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDNSZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDNSZoneRequest) ProtoMessage() {}

func (x *UpdateDNSZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDNSZoneRequest.ProtoReflect.Descriptor instead.
func (*UpdateDNSZoneRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDNSZoneRequest) GetZone() *Zone {
	if x != nil {
		return x.Zone
	}
	return nil
}

type DeleteDNSZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneName string `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ViewName string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (x *DeleteDNSZoneRequest) Reset() {
	*x = DeleteDNSZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDNSZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDNSZoneRequest) ProtoMessage() {}

func (x *DeleteDNSZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDNSZoneRequest.ProtoReflect.Descriptor instead.
func (*DeleteDNSZoneRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteDNSZoneRequest) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *DeleteDNSZoneRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

type DumpDNSAllZonesConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpDNSAllZonesConfigRequest) Reset() {
	*x = DumpDNSAllZonesConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpDNSAllZonesConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpDNSAllZonesConfigRequest) ProtoMessage() {}

func (x *DumpDNSAllZonesConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpDNSAllZonesConfigRequest.ProtoReflect.Descriptor instead.
func (*DumpDNSAllZonesConfigRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{16}
}

type DumpDNSZoneConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneName string `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ViewName string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (x *DumpDNSZoneConfigRequest) Reset() {
	*x = DumpDNSZoneConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpDNSZoneConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpDNSZoneConfigRequest) ProtoMessage() {}

func (x *DumpDNSZoneConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpDNSZoneConfigRequest.ProtoReflect.Descriptor instead.
func (*DumpDNSZoneConfigRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{17}
}

func (x *DumpDNSZoneConfigRequest) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *DumpDNSZoneConfigRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

type ReloadNginxConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadNginxConfigRequest) Reset() {
	*x = ReloadNginxConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ddi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadNginxConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadNginxConfigRequest) ProtoMessage() {}

func (x *ReloadNginxConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ddi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadNginxConfigRequest.ProtoReflect.Descriptor instead.
func (*ReloadNginxConfigRequest) Descriptor() ([]byte, []int) {
	return file_ddi_proto_rawDescGZIP(), []int{18}
}

var File_ddi_proto protoreflect.FileDescriptor

var file_ddi_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x64, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x4e, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x48,
	0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x70, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x53,
	0x74, 0x6f, 0x70, 0x44, 0x48, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e,
	0x0a, 0x12, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x10, 0x44,
	0x44, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x16,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x34, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x34, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x36,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x36, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x6c, 0x61, 0x76,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x6c,
	0x61, 0x76, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x44, 0x4e, 0x53, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x4e, 0x53,
	0x41, 0x6c, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x4e, 0x53,
	0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xdc, 0x08, 0x0a, 0x0a, 0x44, 0x44, 0x49, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x4e, 0x53, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x48, 0x43, 0x50, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x48, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x70, 0x44, 0x4e, 0x53, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x74, 0x6f,
	0x70, 0x44, 0x48, 0x43, 0x50, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x44, 0x48, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x48, 0x43, 0x50, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x4e, 0x53, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x4e, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x4e, 0x53,
	0x41, 0x6c, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x4e, 0x53, 0x41, 0x6c,
	0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x44, 0x4e, 0x53, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x67, 0x69,
	0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x44, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ddi_proto_rawDescOnce sync.Once
	file_ddi_proto_rawDescData = file_ddi_proto_rawDesc
)

func file_ddi_proto_rawDescGZIP() []byte {
	file_ddi_proto_rawDescOnce.Do(func() {
		file_ddi_proto_rawDescData = protoimpl.X.CompressGZIP(file_ddi_proto_rawDescData)
	})
	return file_ddi_proto_rawDescData
}

var file_ddi_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ddi_proto_goTypes = []interface{}{
	(*StartDNSRequest)(nil),              // 0: proto.StartDNSRequest
	(*StartDHCPRequest)(nil),             // 1: proto.StartDHCPRequest
	(*StopDNSRequest)(nil),               // 2: proto.StopDNSRequest
	(*StopDHCPRequest)(nil),              // 3: proto.StopDHCPRequest
	(*DDIMonitorResponse)(nil),           // 4: proto.DDIMonitorResponse
	(*GetDNSStateRequest)(nil),           // 5: proto.GetDNSStateRequest
	(*GetDHCPStateRequest)(nil),          // 6: proto.GetDHCPStateRequest
	(*DDIStateResponse)(nil),             // 7: proto.DDIStateResponse
	(*GetInterfacesRequest)(nil),         // 8: proto.GetInterfacesRequest
	(*GetInterfacesResponse)(nil),        // 9: proto.GetInterfacesResponse
	(*ReconfigDNSRequest)(nil),           // 10: proto.ReconfigDNSRequest
	(*ReloadDNSConfigRequest)(nil),       // 11: proto.ReloadDNSConfigRequest
	(*Zone)(nil),                         // 12: proto.Zone
	(*AddDNSZoneRequest)(nil),            // 13: proto.AddDNSZoneRequest
	(*UpdateDNSZoneRequest)(nil),         // 14: proto.UpdateDNSZoneRequest
	(*DeleteDNSZoneRequest)(nil),         // 15: proto.DeleteDNSZoneRequest
	(*DumpDNSAllZonesConfigRequest)(nil), // 16: proto.DumpDNSAllZonesConfigRequest
	(*DumpDNSZoneConfigRequest)(nil),     // 17: proto.DumpDNSZoneConfigRequest
	(*ReloadNginxConfigRequest)(nil),     // 18: proto.ReloadNginxConfigRequest
}
var file_ddi_proto_depIdxs = []int32{
	12, // 0: proto.AddDNSZoneRequest.zone:type_name -> proto.Zone
	12, // 1: proto.UpdateDNSZoneRequest.zone:type_name -> proto.Zone
	0,  // 2: proto.DDIMonitor.StartDNS:input_type -> proto.StartDNSRequest
	1,  // 3: proto.DDIMonitor.StartDHCP:input_type -> proto.StartDHCPRequest
	2,  // 4: proto.DDIMonitor.StopDNS:input_type -> proto.StopDNSRequest
	3,  // 5: proto.DDIMonitor.StopDHCP:input_type -> proto.StopDHCPRequest
	5,  // 6: proto.DDIMonitor.GetDNSState:input_type -> proto.GetDNSStateRequest
	6,  // 7: proto.DDIMonitor.GetDHCPState:input_type -> proto.GetDHCPStateRequest
	8,  // 8: proto.DDIMonitor.GetInterfaces:input_type -> proto.GetInterfacesRequest
	10, // 9: proto.DDIMonitor.ReconfigDNS:input_type -> proto.ReconfigDNSRequest
	11, // 10: proto.DDIMonitor.ReloadDNSConfig:input_type -> proto.ReloadDNSConfigRequest
	13, // 11: proto.DDIMonitor.AddDNSZone:input_type -> proto.AddDNSZoneRequest
	14, // 12: proto.DDIMonitor.UpdateDNSZone:input_type -> proto.UpdateDNSZoneRequest
	15, // 13: proto.DDIMonitor.DeleteDNSZone:input_type -> proto.DeleteDNSZoneRequest
	16, // 14: proto.DDIMonitor.DumpDNSAllZonesConfig:input_type -> proto.DumpDNSAllZonesConfigRequest
	17, // 15: proto.DDIMonitor.DumpDNSZoneConfig:input_type -> proto.DumpDNSZoneConfigRequest
	18, // 16: proto.DDIMonitor.ReloadNginxConfig:input_type -> proto.ReloadNginxConfigRequest
	4,  // 17: proto.DDIMonitor.StartDNS:output_type -> proto.DDIMonitorResponse
	4,  // 18: proto.DDIMonitor.StartDHCP:output_type -> proto.DDIMonitorResponse
	4,  // 19: proto.DDIMonitor.StopDNS:output_type -> proto.DDIMonitorResponse
	4,  // 20: proto.DDIMonitor.StopDHCP:output_type -> proto.DDIMonitorResponse
	7,  // 21: proto.DDIMonitor.GetDNSState:output_type -> proto.DDIStateResponse
	7,  // 22: proto.DDIMonitor.GetDHCPState:output_type -> proto.DDIStateResponse
	9,  // 23: proto.DDIMonitor.GetInterfaces:output_type -> proto.GetInterfacesResponse
	4,  // 24: proto.DDIMonitor.ReconfigDNS:output_type -> proto.DDIMonitorResponse
	4,  // 25: proto.DDIMonitor.ReloadDNSConfig:output_type -> proto.DDIMonitorResponse
	4,  // 26: proto.DDIMonitor.AddDNSZone:output_type -> proto.DDIMonitorResponse
	4,  // 27: proto.DDIMonitor.UpdateDNSZone:output_type -> proto.DDIMonitorResponse
	4,  // 28: proto.DDIMonitor.DeleteDNSZone:output_type -> proto.DDIMonitorResponse
	4,  // 29: proto.DDIMonitor.DumpDNSAllZonesConfig:output_type -> proto.DDIMonitorResponse
	4,  // 30: proto.DDIMonitor.DumpDNSZoneConfig:output_type -> proto.DDIMonitorResponse
	4,  // 31: proto.DDIMonitor.ReloadNginxConfig:output_type -> proto.DDIMonitorResponse
	17, // [17:32] is the sub-list for method output_type
	2,  // [2:17] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_ddi_proto_init() }
func file_ddi_proto_init() {
	if File_ddi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ddi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDHCPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopDHCPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDIMonitorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDNSStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DDIStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconfigDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadDNSConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDNSZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDNSZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDNSZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpDNSAllZonesConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpDNSZoneConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ddi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadNginxConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ddi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ddi_proto_goTypes,
		DependencyIndexes: file_ddi_proto_depIdxs,
		MessageInfos:      file_ddi_proto_msgTypes,
	}.Build()
	File_ddi_proto = out.File
	file_ddi_proto_rawDesc = nil
	file_ddi_proto_goTypes = nil
	file_ddi_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DDIMonitorClient is the client API for DDIMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DDIMonitorClient interface {
	StartDNS(ctx context.Context, in *StartDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	StartDHCP(ctx context.Context, in *StartDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	StopDNS(ctx context.Context, in *StopDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	StopDHCP(ctx context.Context, in *StopDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	GetDNSState(ctx context.Context, in *GetDNSStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error)
	GetDHCPState(ctx context.Context, in *GetDHCPStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error)
	GetInterfaces(ctx context.Context, in *GetInterfacesRequest, opts ...grpc.CallOption) (*GetInterfacesResponse, error)
	ReconfigDNS(ctx context.Context, in *ReconfigDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	ReloadDNSConfig(ctx context.Context, in *ReloadDNSConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	AddDNSZone(ctx context.Context, in *AddDNSZoneRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	UpdateDNSZone(ctx context.Context, in *UpdateDNSZoneRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	DeleteDNSZone(ctx context.Context, in *DeleteDNSZoneRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	DumpDNSAllZonesConfig(ctx context.Context, in *DumpDNSAllZonesConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	DumpDNSZoneConfig(ctx context.Context, in *DumpDNSZoneConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	ReloadNginxConfig(ctx context.Context, in *ReloadNginxConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
}

type dDIMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewDDIMonitorClient(cc grpc.ClientConnInterface) DDIMonitorClient {
	return &dDIMonitorClient{cc}
}

func (c *dDIMonitorClient) StartDNS(ctx context.Context, in *StartDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StartDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) StartDHCP(ctx context.Context, in *StartDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StartDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) StopDNS(ctx context.Context, in *StopDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StopDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) StopDHCP(ctx context.Context, in *StopDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StopDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) GetDNSState(ctx context.Context, in *GetDNSStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error) {
	out := new(DDIStateResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/GetDNSState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) GetDHCPState(ctx context.Context, in *GetDHCPStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error) {
	out := new(DDIStateResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/GetDHCPState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) GetInterfaces(ctx context.Context, in *GetInterfacesRequest, opts ...grpc.CallOption) (*GetInterfacesResponse, error) {
	out := new(GetInterfacesResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/GetInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) ReconfigDNS(ctx context.Context, in *ReconfigDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/ReconfigDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) ReloadDNSConfig(ctx context.Context, in *ReloadDNSConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/ReloadDNSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) AddDNSZone(ctx context.Context, in *AddDNSZoneRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/AddDNSZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) UpdateDNSZone(ctx context.Context, in *UpdateDNSZoneRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/UpdateDNSZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) DeleteDNSZone(ctx context.Context, in *DeleteDNSZoneRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/DeleteDNSZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) DumpDNSAllZonesConfig(ctx context.Context, in *DumpDNSAllZonesConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/DumpDNSAllZonesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) DumpDNSZoneConfig(ctx context.Context, in *DumpDNSZoneConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/DumpDNSZoneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) ReloadNginxConfig(ctx context.Context, in *ReloadNginxConfigRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/ReloadNginxConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDIMonitorServer is the server API for DDIMonitor service.
type DDIMonitorServer interface {
	StartDNS(context.Context, *StartDNSRequest) (*DDIMonitorResponse, error)
	StartDHCP(context.Context, *StartDHCPRequest) (*DDIMonitorResponse, error)
	StopDNS(context.Context, *StopDNSRequest) (*DDIMonitorResponse, error)
	StopDHCP(context.Context, *StopDHCPRequest) (*DDIMonitorResponse, error)
	GetDNSState(context.Context, *GetDNSStateRequest) (*DDIStateResponse, error)
	GetDHCPState(context.Context, *GetDHCPStateRequest) (*DDIStateResponse, error)
	GetInterfaces(context.Context, *GetInterfacesRequest) (*GetInterfacesResponse, error)
	ReconfigDNS(context.Context, *ReconfigDNSRequest) (*DDIMonitorResponse, error)
	ReloadDNSConfig(context.Context, *ReloadDNSConfigRequest) (*DDIMonitorResponse, error)
	AddDNSZone(context.Context, *AddDNSZoneRequest) (*DDIMonitorResponse, error)
	UpdateDNSZone(context.Context, *UpdateDNSZoneRequest) (*DDIMonitorResponse, error)
	DeleteDNSZone(context.Context, *DeleteDNSZoneRequest) (*DDIMonitorResponse, error)
	DumpDNSAllZonesConfig(context.Context, *DumpDNSAllZonesConfigRequest) (*DDIMonitorResponse, error)
	DumpDNSZoneConfig(context.Context, *DumpDNSZoneConfigRequest) (*DDIMonitorResponse, error)
	ReloadNginxConfig(context.Context, *ReloadNginxConfigRequest) (*DDIMonitorResponse, error)
}

// UnimplementedDDIMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedDDIMonitorServer struct {
}

func (*UnimplementedDDIMonitorServer) StartDNS(context.Context, *StartDNSRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDNS not implemented")
}
func (*UnimplementedDDIMonitorServer) StartDHCP(context.Context, *StartDHCPRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDHCP not implemented")
}
func (*UnimplementedDDIMonitorServer) StopDNS(context.Context, *StopDNSRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDNS not implemented")
}
func (*UnimplementedDDIMonitorServer) StopDHCP(context.Context, *StopDHCPRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDHCP not implemented")
}
func (*UnimplementedDDIMonitorServer) GetDNSState(context.Context, *GetDNSStateRequest) (*DDIStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSState not implemented")
}
func (*UnimplementedDDIMonitorServer) GetDHCPState(context.Context, *GetDHCPStateRequest) (*DDIStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDHCPState not implemented")
}
func (*UnimplementedDDIMonitorServer) GetInterfaces(context.Context, *GetInterfacesRequest) (*GetInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaces not implemented")
}
func (*UnimplementedDDIMonitorServer) ReconfigDNS(context.Context, *ReconfigDNSRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconfigDNS not implemented")
}
func (*UnimplementedDDIMonitorServer) ReloadDNSConfig(context.Context, *ReloadDNSConfigRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadDNSConfig not implemented")
}
func (*UnimplementedDDIMonitorServer) AddDNSZone(context.Context, *AddDNSZoneRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDNSZone not implemented")
}
func (*UnimplementedDDIMonitorServer) UpdateDNSZone(context.Context, *UpdateDNSZoneRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDNSZone not implemented")
}
func (*UnimplementedDDIMonitorServer) DeleteDNSZone(context.Context, *DeleteDNSZoneRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDNSZone not implemented")
}
func (*UnimplementedDDIMonitorServer) DumpDNSAllZonesConfig(context.Context, *DumpDNSAllZonesConfigRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpDNSAllZonesConfig not implemented")
}
func (*UnimplementedDDIMonitorServer) DumpDNSZoneConfig(context.Context, *DumpDNSZoneConfigRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpDNSZoneConfig not implemented")
}
func (*UnimplementedDDIMonitorServer) ReloadNginxConfig(context.Context, *ReloadNginxConfigRequest) (*DDIMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadNginxConfig not implemented")
}

func RegisterDDIMonitorServer(s *grpc.Server, srv DDIMonitorServer) {
	s.RegisterService(&_DDIMonitor_serviceDesc, srv)
}

func _DDIMonitor_StartDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StartDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StartDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StartDNS(ctx, req.(*StartDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_StartDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDHCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StartDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StartDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StartDHCP(ctx, req.(*StartDHCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_StopDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StopDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StopDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StopDNS(ctx, req.(*StopDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_StopDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDHCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StopDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StopDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StopDHCP(ctx, req.(*StopDHCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_GetDNSState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).GetDNSState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/GetDNSState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).GetDNSState(ctx, req.(*GetDNSStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_GetDHCPState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDHCPStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).GetDHCPState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/GetDHCPState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).GetDHCPState(ctx, req.(*GetDHCPStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_GetInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).GetInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/GetInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).GetInterfaces(ctx, req.(*GetInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_ReconfigDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconfigDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).ReconfigDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/ReconfigDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).ReconfigDNS(ctx, req.(*ReconfigDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_ReloadDNSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadDNSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).ReloadDNSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/ReloadDNSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).ReloadDNSConfig(ctx, req.(*ReloadDNSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_AddDNSZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).AddDNSZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/AddDNSZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).AddDNSZone(ctx, req.(*AddDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_UpdateDNSZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).UpdateDNSZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/UpdateDNSZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).UpdateDNSZone(ctx, req.(*UpdateDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_DeleteDNSZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDNSZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).DeleteDNSZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/DeleteDNSZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).DeleteDNSZone(ctx, req.(*DeleteDNSZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_DumpDNSAllZonesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpDNSAllZonesConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).DumpDNSAllZonesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/DumpDNSAllZonesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).DumpDNSAllZonesConfig(ctx, req.(*DumpDNSAllZonesConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_DumpDNSZoneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpDNSZoneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).DumpDNSZoneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/DumpDNSZoneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).DumpDNSZoneConfig(ctx, req.(*DumpDNSZoneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_ReloadNginxConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadNginxConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).ReloadNginxConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/ReloadNginxConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).ReloadNginxConfig(ctx, req.(*ReloadNginxConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDIMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DDIMonitor",
	HandlerType: (*DDIMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDNS",
			Handler:    _DDIMonitor_StartDNS_Handler,
		},
		{
			MethodName: "StartDHCP",
			Handler:    _DDIMonitor_StartDHCP_Handler,
		},
		{
			MethodName: "StopDNS",
			Handler:    _DDIMonitor_StopDNS_Handler,
		},
		{
			MethodName: "StopDHCP",
			Handler:    _DDIMonitor_StopDHCP_Handler,
		},
		{
			MethodName: "GetDNSState",
			Handler:    _DDIMonitor_GetDNSState_Handler,
		},
		{
			MethodName: "GetDHCPState",
			Handler:    _DDIMonitor_GetDHCPState_Handler,
		},
		{
			MethodName: "GetInterfaces",
			Handler:    _DDIMonitor_GetInterfaces_Handler,
		},
		{
			MethodName: "ReconfigDNS",
			Handler:    _DDIMonitor_ReconfigDNS_Handler,
		},
		{
			MethodName: "ReloadDNSConfig",
			Handler:    _DDIMonitor_ReloadDNSConfig_Handler,
		},
		{
			MethodName: "AddDNSZone",
			Handler:    _DDIMonitor_AddDNSZone_Handler,
		},
		{
			MethodName: "UpdateDNSZone",
			Handler:    _DDIMonitor_UpdateDNSZone_Handler,
		},
		{
			MethodName: "DeleteDNSZone",
			Handler:    _DDIMonitor_DeleteDNSZone_Handler,
		},
		{
			MethodName: "DumpDNSAllZonesConfig",
			Handler:    _DDIMonitor_DumpDNSAllZonesConfig_Handler,
		},
		{
			MethodName: "DumpDNSZoneConfig",
			Handler:    _DDIMonitor_DumpDNSZoneConfig_Handler,
		},
		{
			MethodName: "ReloadNginxConfig",
			Handler:    _DDIMonitor_ReloadNginxConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ddi.proto",
}
