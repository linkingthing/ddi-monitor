// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ddi.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartDNSRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartDNSRequest) Reset()         { *m = StartDNSRequest{} }
func (m *StartDNSRequest) String() string { return proto.CompactTextString(m) }
func (*StartDNSRequest) ProtoMessage()    {}
func (*StartDNSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{0}
}
func (m *StartDNSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartDNSRequest.Unmarshal(m, b)
}
func (m *StartDNSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartDNSRequest.Marshal(b, m, deterministic)
}
func (dst *StartDNSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartDNSRequest.Merge(dst, src)
}
func (m *StartDNSRequest) XXX_Size() int {
	return xxx_messageInfo_StartDNSRequest.Size(m)
}
func (m *StartDNSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartDNSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartDNSRequest proto.InternalMessageInfo

type StartDHCPRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartDHCPRequest) Reset()         { *m = StartDHCPRequest{} }
func (m *StartDHCPRequest) String() string { return proto.CompactTextString(m) }
func (*StartDHCPRequest) ProtoMessage()    {}
func (*StartDHCPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{1}
}
func (m *StartDHCPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartDHCPRequest.Unmarshal(m, b)
}
func (m *StartDHCPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartDHCPRequest.Marshal(b, m, deterministic)
}
func (dst *StartDHCPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartDHCPRequest.Merge(dst, src)
}
func (m *StartDHCPRequest) XXX_Size() int {
	return xxx_messageInfo_StartDHCPRequest.Size(m)
}
func (m *StartDHCPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartDHCPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartDHCPRequest proto.InternalMessageInfo

type StopDNSRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopDNSRequest) Reset()         { *m = StopDNSRequest{} }
func (m *StopDNSRequest) String() string { return proto.CompactTextString(m) }
func (*StopDNSRequest) ProtoMessage()    {}
func (*StopDNSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{2}
}
func (m *StopDNSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopDNSRequest.Unmarshal(m, b)
}
func (m *StopDNSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopDNSRequest.Marshal(b, m, deterministic)
}
func (dst *StopDNSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopDNSRequest.Merge(dst, src)
}
func (m *StopDNSRequest) XXX_Size() int {
	return xxx_messageInfo_StopDNSRequest.Size(m)
}
func (m *StopDNSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopDNSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopDNSRequest proto.InternalMessageInfo

type StopDHCPRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopDHCPRequest) Reset()         { *m = StopDHCPRequest{} }
func (m *StopDHCPRequest) String() string { return proto.CompactTextString(m) }
func (*StopDHCPRequest) ProtoMessage()    {}
func (*StopDHCPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{3}
}
func (m *StopDHCPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopDHCPRequest.Unmarshal(m, b)
}
func (m *StopDHCPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopDHCPRequest.Marshal(b, m, deterministic)
}
func (dst *StopDHCPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopDHCPRequest.Merge(dst, src)
}
func (m *StopDHCPRequest) XXX_Size() int {
	return xxx_messageInfo_StopDHCPRequest.Size(m)
}
func (m *StopDHCPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopDHCPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopDHCPRequest proto.InternalMessageInfo

type DDIMonitorResponse struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DDIMonitorResponse) Reset()         { *m = DDIMonitorResponse{} }
func (m *DDIMonitorResponse) String() string { return proto.CompactTextString(m) }
func (*DDIMonitorResponse) ProtoMessage()    {}
func (*DDIMonitorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{4}
}
func (m *DDIMonitorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DDIMonitorResponse.Unmarshal(m, b)
}
func (m *DDIMonitorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DDIMonitorResponse.Marshal(b, m, deterministic)
}
func (dst *DDIMonitorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDIMonitorResponse.Merge(dst, src)
}
func (m *DDIMonitorResponse) XXX_Size() int {
	return xxx_messageInfo_DDIMonitorResponse.Size(m)
}
func (m *DDIMonitorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DDIMonitorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DDIMonitorResponse proto.InternalMessageInfo

func (m *DDIMonitorResponse) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

type GetDNSStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDNSStateRequest) Reset()         { *m = GetDNSStateRequest{} }
func (m *GetDNSStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetDNSStateRequest) ProtoMessage()    {}
func (*GetDNSStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{5}
}
func (m *GetDNSStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDNSStateRequest.Unmarshal(m, b)
}
func (m *GetDNSStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDNSStateRequest.Marshal(b, m, deterministic)
}
func (dst *GetDNSStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDNSStateRequest.Merge(dst, src)
}
func (m *GetDNSStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetDNSStateRequest.Size(m)
}
func (m *GetDNSStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDNSStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDNSStateRequest proto.InternalMessageInfo

type GetDHCPStateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDHCPStateRequest) Reset()         { *m = GetDHCPStateRequest{} }
func (m *GetDHCPStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetDHCPStateRequest) ProtoMessage()    {}
func (*GetDHCPStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{6}
}
func (m *GetDHCPStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDHCPStateRequest.Unmarshal(m, b)
}
func (m *GetDHCPStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDHCPStateRequest.Marshal(b, m, deterministic)
}
func (dst *GetDHCPStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDHCPStateRequest.Merge(dst, src)
}
func (m *GetDHCPStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetDHCPStateRequest.Size(m)
}
func (m *GetDHCPStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDHCPStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDHCPStateRequest proto.InternalMessageInfo

type DDIStateResponse struct {
	IsRunning            bool     `protobuf:"varint,1,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DDIStateResponse) Reset()         { *m = DDIStateResponse{} }
func (m *DDIStateResponse) String() string { return proto.CompactTextString(m) }
func (*DDIStateResponse) ProtoMessage()    {}
func (*DDIStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{7}
}
func (m *DDIStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DDIStateResponse.Unmarshal(m, b)
}
func (m *DDIStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DDIStateResponse.Marshal(b, m, deterministic)
}
func (dst *DDIStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDIStateResponse.Merge(dst, src)
}
func (m *DDIStateResponse) XXX_Size() int {
	return xxx_messageInfo_DDIStateResponse.Size(m)
}
func (m *DDIStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DDIStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DDIStateResponse proto.InternalMessageInfo

func (m *DDIStateResponse) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

type GetInterfacesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInterfacesRequest) Reset()         { *m = GetInterfacesRequest{} }
func (m *GetInterfacesRequest) String() string { return proto.CompactTextString(m) }
func (*GetInterfacesRequest) ProtoMessage()    {}
func (*GetInterfacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{8}
}
func (m *GetInterfacesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInterfacesRequest.Unmarshal(m, b)
}
func (m *GetInterfacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInterfacesRequest.Marshal(b, m, deterministic)
}
func (dst *GetInterfacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInterfacesRequest.Merge(dst, src)
}
func (m *GetInterfacesRequest) XXX_Size() int {
	return xxx_messageInfo_GetInterfacesRequest.Size(m)
}
func (m *GetInterfacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInterfacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInterfacesRequest proto.InternalMessageInfo

type GetInterfacesResponse struct {
	Interfaces4          []string `protobuf:"bytes,1,rep,name=interfaces4,proto3" json:"interfaces4,omitempty"`
	Interfaces6          []string `protobuf:"bytes,2,rep,name=interfaces6,proto3" json:"interfaces6,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInterfacesResponse) Reset()         { *m = GetInterfacesResponse{} }
func (m *GetInterfacesResponse) String() string { return proto.CompactTextString(m) }
func (*GetInterfacesResponse) ProtoMessage()    {}
func (*GetInterfacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddi_3631ff8d3b74ddf5, []int{9}
}
func (m *GetInterfacesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetInterfacesResponse.Unmarshal(m, b)
}
func (m *GetInterfacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetInterfacesResponse.Marshal(b, m, deterministic)
}
func (dst *GetInterfacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInterfacesResponse.Merge(dst, src)
}
func (m *GetInterfacesResponse) XXX_Size() int {
	return xxx_messageInfo_GetInterfacesResponse.Size(m)
}
func (m *GetInterfacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInterfacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInterfacesResponse proto.InternalMessageInfo

func (m *GetInterfacesResponse) GetInterfaces4() []string {
	if m != nil {
		return m.Interfaces4
	}
	return nil
}

func (m *GetInterfacesResponse) GetInterfaces6() []string {
	if m != nil {
		return m.Interfaces6
	}
	return nil
}

func init() {
	proto.RegisterType((*StartDNSRequest)(nil), "proto.StartDNSRequest")
	proto.RegisterType((*StartDHCPRequest)(nil), "proto.StartDHCPRequest")
	proto.RegisterType((*StopDNSRequest)(nil), "proto.StopDNSRequest")
	proto.RegisterType((*StopDHCPRequest)(nil), "proto.StopDHCPRequest")
	proto.RegisterType((*DDIMonitorResponse)(nil), "proto.DDIMonitorResponse")
	proto.RegisterType((*GetDNSStateRequest)(nil), "proto.GetDNSStateRequest")
	proto.RegisterType((*GetDHCPStateRequest)(nil), "proto.GetDHCPStateRequest")
	proto.RegisterType((*DDIStateResponse)(nil), "proto.DDIStateResponse")
	proto.RegisterType((*GetInterfacesRequest)(nil), "proto.GetInterfacesRequest")
	proto.RegisterType((*GetInterfacesResponse)(nil), "proto.GetInterfacesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DDIMonitorClient is the client API for DDIMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DDIMonitorClient interface {
	StartDNS(ctx context.Context, in *StartDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	StartDHCP(ctx context.Context, in *StartDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	StopDNS(ctx context.Context, in *StopDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	StopDHCP(ctx context.Context, in *StopDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error)
	GetDNSState(ctx context.Context, in *GetDNSStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error)
	GetDHCPState(ctx context.Context, in *GetDHCPStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error)
	GetInterfaces(ctx context.Context, in *GetInterfacesRequest, opts ...grpc.CallOption) (*GetInterfacesResponse, error)
}

type dDIMonitorClient struct {
	cc *grpc.ClientConn
}

func NewDDIMonitorClient(cc *grpc.ClientConn) DDIMonitorClient {
	return &dDIMonitorClient{cc}
}

func (c *dDIMonitorClient) StartDNS(ctx context.Context, in *StartDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StartDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) StartDHCP(ctx context.Context, in *StartDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StartDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) StopDNS(ctx context.Context, in *StopDNSRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StopDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) StopDHCP(ctx context.Context, in *StopDHCPRequest, opts ...grpc.CallOption) (*DDIMonitorResponse, error) {
	out := new(DDIMonitorResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/StopDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) GetDNSState(ctx context.Context, in *GetDNSStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error) {
	out := new(DDIStateResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/GetDNSState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) GetDHCPState(ctx context.Context, in *GetDHCPStateRequest, opts ...grpc.CallOption) (*DDIStateResponse, error) {
	out := new(DDIStateResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/GetDHCPState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDIMonitorClient) GetInterfaces(ctx context.Context, in *GetInterfacesRequest, opts ...grpc.CallOption) (*GetInterfacesResponse, error) {
	out := new(GetInterfacesResponse)
	err := c.cc.Invoke(ctx, "/proto.DDIMonitor/GetInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDIMonitorServer is the server API for DDIMonitor service.
type DDIMonitorServer interface {
	StartDNS(context.Context, *StartDNSRequest) (*DDIMonitorResponse, error)
	StartDHCP(context.Context, *StartDHCPRequest) (*DDIMonitorResponse, error)
	StopDNS(context.Context, *StopDNSRequest) (*DDIMonitorResponse, error)
	StopDHCP(context.Context, *StopDHCPRequest) (*DDIMonitorResponse, error)
	GetDNSState(context.Context, *GetDNSStateRequest) (*DDIStateResponse, error)
	GetDHCPState(context.Context, *GetDHCPStateRequest) (*DDIStateResponse, error)
	GetInterfaces(context.Context, *GetInterfacesRequest) (*GetInterfacesResponse, error)
}

func RegisterDDIMonitorServer(s *grpc.Server, srv DDIMonitorServer) {
	s.RegisterService(&_DDIMonitor_serviceDesc, srv)
}

func _DDIMonitor_StartDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StartDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StartDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StartDNS(ctx, req.(*StartDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_StartDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDHCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StartDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StartDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StartDHCP(ctx, req.(*StartDHCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_StopDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StopDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StopDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StopDNS(ctx, req.(*StopDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_StopDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDHCPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).StopDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/StopDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).StopDHCP(ctx, req.(*StopDHCPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_GetDNSState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).GetDNSState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/GetDNSState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).GetDNSState(ctx, req.(*GetDNSStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_GetDHCPState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDHCPStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).GetDHCPState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/GetDHCPState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).GetDHCPState(ctx, req.(*GetDHCPStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDIMonitor_GetInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDIMonitorServer).GetInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DDIMonitor/GetInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDIMonitorServer).GetInterfaces(ctx, req.(*GetInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDIMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DDIMonitor",
	HandlerType: (*DDIMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDNS",
			Handler:    _DDIMonitor_StartDNS_Handler,
		},
		{
			MethodName: "StartDHCP",
			Handler:    _DDIMonitor_StartDHCP_Handler,
		},
		{
			MethodName: "StopDNS",
			Handler:    _DDIMonitor_StopDNS_Handler,
		},
		{
			MethodName: "StopDHCP",
			Handler:    _DDIMonitor_StopDHCP_Handler,
		},
		{
			MethodName: "GetDNSState",
			Handler:    _DDIMonitor_GetDNSState_Handler,
		},
		{
			MethodName: "GetDHCPState",
			Handler:    _DDIMonitor_GetDHCPState_Handler,
		},
		{
			MethodName: "GetInterfaces",
			Handler:    _DDIMonitor_GetInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ddi.proto",
}

func init() { proto.RegisterFile("ddi.proto", fileDescriptor_ddi_3631ff8d3b74ddf5) }

var fileDescriptor_ddi_3631ff8d3b74ddf5 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4b, 0x4f, 0xf2, 0x40,
	0x14, 0x86, 0xe1, 0x23, 0x9f, 0xd0, 0x83, 0x17, 0x3c, 0x72, 0xa9, 0x55, 0x13, 0xd2, 0x15, 0x2b,
	0x12, 0x2f, 0x61, 0x67, 0x8c, 0xa1, 0x06, 0x48, 0xd4, 0x90, 0x76, 0xe9, 0xc2, 0x20, 0x8c, 0x66,
	0x36, 0x33, 0xb5, 0x33, 0xfc, 0x69, 0x7f, 0x85, 0xa1, 0x9d, 0xa1, 0x33, 0xad, 0xe9, 0x8a, 0xf0,
	0xcc, 0x99, 0xa7, 0x99, 0xf7, 0x3d, 0xe0, 0x6c, 0x36, 0x74, 0x1c, 0x27, 0x5c, 0x72, 0xfc, 0x9f,
	0xfe, 0xf8, 0xa7, 0x70, 0x12, 0xc9, 0x55, 0x22, 0x83, 0xd7, 0x28, 0x24, 0xdf, 0x5b, 0x22, 0xa4,
	0x8f, 0xd0, 0xc9, 0xd0, 0x7c, 0xba, 0xd4, 0xac, 0x03, 0xc7, 0x91, 0xe4, 0xb1, 0x31, 0x95, 0x5e,
	0xe4, 0xb1, 0x39, 0x34, 0x06, 0x0c, 0x82, 0xc5, 0x0b, 0x67, 0x54, 0xf2, 0x24, 0x24, 0x22, 0xe6,
	0x4c, 0x10, 0x74, 0xa1, 0x29, 0xb6, 0xeb, 0x35, 0x21, 0x1b, 0xb7, 0x3e, 0xac, 0x8f, 0x5a, 0xa1,
	0xfe, 0xeb, 0x77, 0x01, 0x67, 0x64, 0xf7, 0xe5, 0x48, 0xae, 0x24, 0xd1, 0x96, 0x1e, 0x9c, 0xed,
	0xe8, 0x7c, 0xba, 0xb4, 0xf0, 0x35, 0x74, 0x82, 0x60, 0xa1, 0x90, 0x52, 0x5f, 0x01, 0x50, 0xf1,
	0x9e, 0x6c, 0x19, 0xa3, 0xec, 0x4b, 0xd9, 0x1d, 0x2a, 0xc2, 0x0c, 0xf8, 0x7d, 0xe8, 0xce, 0x88,
	0x5c, 0x30, 0x49, 0x92, 0xcf, 0xd5, 0x9a, 0x08, 0xad, 0x7a, 0x83, 0x5e, 0x81, 0x2b, 0xdf, 0x10,
	0xda, 0x74, 0x4f, 0xef, 0xdc, 0xfa, 0xb0, 0x31, 0x72, 0x42, 0x13, 0xd9, 0x13, 0x13, 0xf7, 0x5f,
	0x71, 0x62, 0x72, 0xf3, 0xd3, 0x00, 0xc8, 0x53, 0xc0, 0x07, 0x68, 0xe9, 0x7c, 0xb1, 0x9f, 0x45,
	0x3f, 0x2e, 0x04, 0xee, 0x9d, 0x2b, 0x5e, 0x0e, 0xcf, 0xaf, 0xe1, 0x23, 0x38, 0xfb, 0x36, 0x70,
	0x60, 0x19, 0xf2, 0xe8, 0xab, 0x15, 0xf7, 0xd0, 0x54, 0xe5, 0x61, 0x6f, 0x2f, 0x30, 0xcb, 0xac,
	0xbe, 0x9e, 0x3e, 0x21, 0x6b, 0xda, 0x78, 0x82, 0x55, 0x7d, 0xb5, 0x60, 0x0a, 0x6d, 0xa3, 0x67,
	0xd4, 0xb3, 0xe5, 0xee, 0xbd, 0x41, 0xae, 0xb1, 0x9a, 0xf6, 0x6b, 0xf8, 0x04, 0x87, 0xe6, 0x5a,
	0xa0, 0x67, 0x58, 0x0a, 0xbb, 0x52, 0xa5, 0x79, 0x86, 0x23, 0xab, 0x7b, 0xbc, 0xc8, 0x3d, 0xa5,
	0x4d, 0xf1, 0x2e, 0xff, 0x3e, 0xd4, 0xb6, 0x8f, 0x83, 0xf4, 0xf8, 0xf6, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x81, 0x64, 0x06, 0x58, 0x03, 0x00, 0x00,
}
